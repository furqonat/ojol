// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/client/users"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model customer {
  id             String                  @id @default(cuid())
  name           String?
  email          String?
  phone          String?
  password       String?
  device_token   customer_device_token[]
  last_sign_in   DateTime?
  last_active    DateTime?
  email_verified Boolean                 @default(false)
  phone_verified Boolean                 @default(false)
  avatar         String?
  status         customer_status         @default(ACTIVE)
}

model customer_device_token {
  id          String    @id @default(cuid())
  token       String    @unique
  customer    customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  customer_id String?
}

enum customer_status {
  ACTIVE
  LOCK
  BLOCK
}

model driver {
  id              String                @id @default(cuid())
  name            String?
  email           String?
  phone           String?
  password        String?
  device_token    driver_device_token[]
  last_sign_in    DateTime?
  last_active     DateTime?
  email_verified  Boolean               @default(false)
  phone_verified  Boolean               @default(false)
  avatar          String?
  status          driver_status         @default(PROCESS)
  driver_details  driver_details?
  driver_settings driver_settings?
}

model driver_settings {
  id             String  @id @default(cuid())
  driver         driver? @relation(fields: [driver_id], references: [id])
  driver_id      String  @unique
  ride           Boolean @default(true)
  ride_price     Int     @default(0)
  delivery       Boolean @default(true)
  delevery_price Int     @default(0)
  food           Boolean @default(true)
  food_price     Int     @default(0)
  mart           Boolean @default(true)
  mart_price     Int     @default(0)
}

model driver_details {
  id            String       @id @default(cuid())
  address       String
  vehicle       vehicle?
  driver        driver?      @relation(fields: [driver_id], references: [id], onDelete: Cascade)
  driver_id     String?      @unique
  license_image String
  id_card_image String
  current_lat   Float?
  current_lng   Float?
  badge         driver_badge @default(BASIC)
}

model vehicle {
  id                   String          @id @default(cuid())
  vehicle_type         vehicle_type
  driver_details       driver_details? @relation(fields: [driver_details_id], references: [id], onDelete: Cascade)
  driver_details_id    String?         @unique
  vehicle_brand        String
  vehicle_year         String
  vehicle_image        String
  vehicle_registration String
}

enum driver_badge {
  BASIC
  REGULAR
  PREMIUM
}

enum driver_status {
  ACTIVE
  PROCESS
  BLOCK
}

enum vehicle_type {
  CAR
  BIKE
}

model driver_device_token {
  id        String  @id @default(cuid())
  token     String  @unique
  driver    driver? @relation(fields: [driver_id], references: [id], onDelete: Cascade)
  driver_id String?
}

model merchant {
  id             String                  @id @default(cuid())
  name           String?
  email          String?
  phone          String?
  password       String?
  device_token   merchant_device_token[]
  last_sign_in   DateTime?
  last_active    DateTime?
  email_verified Boolean                 @default(false)
  phone_verified Boolean                 @default(false)
  avatar         String?
  details        merchant_details?
  status         merchant_status         @default(PROCESS)
}

model merchant_details {
  id            String         @id @default(cuid())
  merchant      merchant?      @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  merchant_id   String?        @unique
  id_card_image String
  address       String
  latitude      Float?
  longitude     Float?
  name          String
  images        images[]
  badge         merchant_badge @default(BASIC)
}

model images {
  id                  String           @id @default(cuid())
  merchant_details    merchant_details @relation(fields: [merchant_details_id], references: [id])
  merchant_details_id String
  link                String
}

enum merchant_badge {
  BASIC
  REGULAR
  PREMIUM
}

enum merchant_status {
  ACTIVE
  PROCESS
  BLOCK
}

enum merchant_type {
  FOOD
  MART
}

model merchant_device_token {
  id          String    @id @default(cuid())
  token       String    @unique
  merchant    merchant? @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
  merchant_id String?
}

model admin {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  last_sign_in DateTime?
  status       Boolean   @default(true)
  avatar       String?
  role         roles[]
}

model roles {
  id    String  @id @default(cuid())
  name  String
  admin admin[]
}
